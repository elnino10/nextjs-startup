{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\new-projects\\\\nextjs-startup\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: `Welcome to ${props.meetups.title}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"A single meetup\",\n        description: props.meetups.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      title: props.meetups.title,\n      image: props.meetups.image,\n      address: props.meetups.address,\n      description: props.meetups.description,\n      id: props.meetups.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  // connect mongodb via MongoClient to store data on DB\n  const client = await MongoClient.connect(process.env.MONGODB_URI);\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\"); // find array of all the objects from DB\n\n  const meetups = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data from API\n  console.log(process.env.MONGODB_URI);\n  const meetupId = context.params.meetupId; // connect mongodb via MongoClient to store data on DB\n\n  const client = await MongoClient.connect(process.env.MONGODB_URI);\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\"); // find object from DB\n\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: new ObjectId(meetupId)\n  });\n  return {\n    props: {\n      meetups: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        image: selectedMeetup.image,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/USER/Desktop/new-projects/nextjs-startup/pages/[meetupId]/index.js"],"names":["Fragment","Head","MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetups","title","description","image","address","id","getStaticPaths","client","connect","process","env","MONGODB_URI","db","meetupCollection","collection","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","console","log","selectedMeetup","findOne"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAS,cAAaA,KAAK,CAACC,OAAN,CAAcC,KAAM;AAA1C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,iBAAX;AAA6B,QAAA,WAAW,EAAEF,KAAK,CAACC,OAAN,CAAcE;AAAxD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEH,KAAK,CAACC,OAAN,CAAcC,KADvB;AAEE,MAAA,KAAK,EAAEF,KAAK,CAACC,OAAN,CAAcG,KAFvB;AAGE,MAAA,OAAO,EAAEJ,KAAK,CAACC,OAAN,CAAcI,OAHzB;AAIE,MAAA,WAAW,EAAEL,KAAK,CAACC,OAAN,CAAcE,WAJ7B;AAKE,MAAA,EAAE,EAAEH,KAAK,CAACC,OAAN,CAAcK;AALpB;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAhBD;;AAkBA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CAAoBC,OAAO,CAACC,GAAR,CAAYC,WAAhC,CAArB;AACA,QAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB,CAJqC,CAMrC;;AACA,QAAMd,OAAO,GAAG,MAAMa,gBAAgB,CAACE,IAAjB,CAAsB,EAAtB,EAA0B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA1B,EAAsCC,OAAtC,EAAtB;AAEAV,EAAAA,MAAM,CAACW,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEpB,OAAO,CAACqB,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYpB,OAAO,CAACC,GAAR,CAAYC,WAAxB;AAEA,QAAMa,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAJ4C,CAM5C;;AACA,QAAMjB,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CAAoBC,OAAO,CAACC,GAAR,CAAYC,WAAhC,CAArB;AACA,QAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB,CAT4C,CAW5C;;AACA,QAAMgB,cAAc,GAAG,MAAMjB,gBAAgB,CAACkB,OAAjB,CAAyB;AACpDf,IAAAA,GAAG,EAAE,IAAIpB,QAAJ,CAAa4B,QAAb;AAD+C,GAAzB,CAA7B;AAIA,SAAO;AACLzB,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE;AACPK,QAAAA,EAAE,EAAEyB,cAAc,CAACd,GAAf,CAAmBS,QAAnB,EADG;AAEPxB,QAAAA,KAAK,EAAE6B,cAAc,CAAC7B,KAFf;AAGPE,QAAAA,KAAK,EAAE2B,cAAc,CAAC3B,KAHf;AAIPC,QAAAA,OAAO,EAAE0B,cAAc,CAAC1B,OAJjB;AAKPF,QAAAA,WAAW,EAAE4B,cAAc,CAAC5B;AALrB;AADJ;AADF,GAAP;AAWD;AAED,eAAeJ,aAAf","sourcesContent":["import { Fragment } from \"react\";\r\nimport Head from \"next/head\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\n\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nconst MeetupDetails = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>{`Welcome to ${props.meetups.title}`}</title>\r\n        <meta name=\"A single meetup\" description={props.meetups.description} />\r\n      </Head>\r\n      <MeetupDetail\r\n        title={props.meetups.title}\r\n        image={props.meetups.image}\r\n        address={props.meetups.address}\r\n        description={props.meetups.description}\r\n        id={props.meetups.id}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n  // connect mongodb via MongoClient to store data on DB\r\n  const client = await MongoClient.connect(process.env.MONGODB_URI);\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n\r\n  // find array of all the objects from DB\r\n  const meetups = await meetupCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  // fetch data from API\r\n  console.log(process.env.MONGODB_URI);\r\n\r\n  const meetupId = context.params.meetupId;\r\n\r\n  // connect mongodb via MongoClient to store data on DB\r\n  const client = await MongoClient.connect(process.env.MONGODB_URI);\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n\r\n  // find object from DB\r\n  const selectedMeetup = await meetupCollection.findOne({\r\n    _id: new ObjectId(meetupId),\r\n  });\r\n\r\n  return {\r\n    props: {\r\n      meetups: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        image: selectedMeetup.image,\r\n        address: selectedMeetup.address,\r\n        description: selectedMeetup.description,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}